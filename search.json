[
  {
    "objectID": "2_concepts.html",
    "href": "2_concepts.html",
    "title": "Concepts de base de Git",
    "section": "",
    "text": "L’historique local dans Git représente l’ensemble des modifications et des versions successives d’un projet qui sont stockées localement sur votre ordinateur. Chaque fois que vous validez des modifications avec une nouvelle sauvegarde (commit), une nouvelle entrée est ajoutée à cet historique. Cet historique permet de suivre l’évolution du projet, de revenir à des versions antérieures et de comprendre les modifications apportées.\n\n\n\nVoir l’historique des commits :\ngit log\nAffiche une liste des commits avec leur identifiant, l’auteur, la date et le message de commit.",
    "crumbs": [
      "Concepts de base"
    ]
  },
  {
    "objectID": "2_concepts.html#historique-local-git",
    "href": "2_concepts.html#historique-local-git",
    "title": "Concepts de base de Git",
    "section": "",
    "text": "L’historique local dans Git représente l’ensemble des modifications et des versions successives d’un projet qui sont stockées localement sur votre ordinateur. Chaque fois que vous validez des modifications avec une nouvelle sauvegarde (commit), une nouvelle entrée est ajoutée à cet historique. Cet historique permet de suivre l’évolution du projet, de revenir à des versions antérieures et de comprendre les modifications apportées.\n\n\n\nVoir l’historique des commits :\ngit log\nAffiche une liste des commits avec leur identifiant, l’auteur, la date et le message de commit.",
    "crumbs": [
      "Concepts de base"
    ]
  },
  {
    "objectID": "2_concepts.html#initialisation-ou-rapatriement-dun-projet-git-clone-ou-init",
    "href": "2_concepts.html#initialisation-ou-rapatriement-dun-projet-git-clone-ou-init",
    "title": "Concepts de base de Git",
    "section": "Initialisation ou rapatriement d’un projet Git (clone ou init)",
    "text": "Initialisation ou rapatriement d’un projet Git (clone ou init)\n\nInitialisation d’un nouveau dépôt Git\nPour créer un nouveau dépôt Git dans un répertoire existant, utilisez la commande suivante :\ngit init\nCette commande crée un sous-répertoire .git qui contient tous les fichiers nécessaires à la gestion du dépôt.\n\n\nClonage d’un dépôt Git existant\nPour copier un dépôt Git existant depuis une URL distante, utilisez :\ngit clone https://url.du.depot.git\nCette commande crée un nouveau répertoire contenant une copie complète de l’historique du projet.",
    "crumbs": [
      "Concepts de base"
    ]
  },
  {
    "objectID": "2_concepts.html#modification-et-ajout-des-fichiers-pertinents-add",
    "href": "2_concepts.html#modification-et-ajout-des-fichiers-pertinents-add",
    "title": "Concepts de base de Git",
    "section": "Modification et ajout des fichiers pertinents (add)",
    "text": "Modification et ajout des fichiers pertinents (add)\nAprès avoir modifié ou ajouté des fichiers dans votre projet, vous devez les ajouter à l’index (staging area) avant de pouvoir les valider.\n\nAjouter un fichier spécifique :\ngit add nom_du_fichier\n\n\nAjouter tous les fichiers modifiés :\ngit add .\nL’ajout des fichiers les prépare pour être inclus dans le prochain commit.",
    "crumbs": [
      "Concepts de base"
    ]
  },
  {
    "objectID": "2_concepts.html#création-dune-sauvegarde-commit",
    "href": "2_concepts.html#création-dune-sauvegarde-commit",
    "title": "Concepts de base de Git",
    "section": "Création d’une sauvegarde (commit)",
    "text": "Création d’une sauvegarde (commit)\nPour sauvegarder les modifications ajoutées à l’index, vous devez créer un commit. Un commit enregistre l’état actuel de votre projet dans l’historique.\n\nCréer un commit avec un message :\ngit commit -m \"Message de commit\"\nLe message de commit doit décrire brièvement les modifications apportées.",
    "crumbs": [
      "Concepts de base"
    ]
  },
  {
    "objectID": "2_concepts.html#empilement-de-sauvegardes-et-navigation-log",
    "href": "2_concepts.html#empilement-de-sauvegardes-et-navigation-log",
    "title": "Concepts de base de Git",
    "section": "Empilement de sauvegardes et navigation (log)",
    "text": "Empilement de sauvegardes et navigation (log)\nGit permet de naviguer dans l’historique des commits pour voir les différentes versions du projet.\n\nVoir l’historique des commits :\ngit log\nCette commande affiche une liste des commits avec leur identifiant, l’auteur, la date et le message de commit.\n\n\nVoir un historique plus compact :\ngit log --oneline\nAffiche chaque commit sur une seule ligne.",
    "crumbs": [
      "Concepts de base"
    ]
  },
  {
    "objectID": "2_concepts.html#historique-centralisé",
    "href": "2_concepts.html#historique-centralisé",
    "title": "Concepts de base de Git",
    "section": "Historique centralisé",
    "text": "Historique centralisé\nL’historique centralisé est stocké sur un serveur distant et permet à plusieurs développeurs de travailler ensemble sur le même projet. Les plateformes commerciales comme GitHub.com, Gitlab.com, ou libres comme framagit.org offrent des services pour héberger des dépôts Git centralisés.",
    "crumbs": [
      "Concepts de base"
    ]
  },
  {
    "objectID": "2_concepts.html#pousser-unedes-sauvegardes-vers-lhistorique-centralisé---synchronisation-sortante-push",
    "href": "2_concepts.html#pousser-unedes-sauvegardes-vers-lhistorique-centralisé---synchronisation-sortante-push",
    "title": "Concepts de base de Git",
    "section": "Pousser une/des sauvegarde/s vers l’historique centralisé - synchronisation sortante (push)",
    "text": "Pousser une/des sauvegarde/s vers l’historique centralisé - synchronisation sortante (push)\nPour envoyer vos commits locaux vers un dépôt distant, vous utilisez la commande git push.\n\nPousser des modifications vers le dépôt distant :\ngit push origin nom_de_branche\nCette commande envoie les commits de votre branche locale vers la branche correspondante sur le dépôt distant.",
    "crumbs": [
      "Concepts de base"
    ]
  },
  {
    "objectID": "2_concepts.html#récupérer-uneles-sauvegardes-depuis-lhistorique-centralisé---synchronisation-entrante-pullfetch",
    "href": "2_concepts.html#récupérer-uneles-sauvegardes-depuis-lhistorique-centralisé---synchronisation-entrante-pullfetch",
    "title": "Concepts de base de Git",
    "section": "Récupérer une/les sauvegarde/s depuis l’historique centralisé - synchronisation entrante (pull/fetch)",
    "text": "Récupérer une/les sauvegarde/s depuis l’historique centralisé - synchronisation entrante (pull/fetch)\n\nRécupérer les modifications depuis le dépôt distant (pull)\nLa commande git pull est utilisée pour récupérer les modifications depuis le dépôt distant et les fusionner avec votre branche locale.\ngit pull origin nom_de_branche\n\n\nRécupérer les modifications sans les fusionner (fetch)\nLa commande git fetch télécharge les modifications depuis le dépôt distant, mais ne les fusionne pas automatiquement. Vous pouvez ensuite les examiner et les fusionner manuellement.\ngit fetch origin\nPour fusionner les modifications après un fetch :\ngit merge origin/nom_de_branche\nEn utilisant ces commandes, vous pouvez gérer efficacement l’historique de votre projet, collaborer avec d’autres développeurs et synchroniser vos modifications avec un dépôt centralisé.",
    "crumbs": [
      "Concepts de base"
    ]
  },
  {
    "objectID": "1_intro.html",
    "href": "1_intro.html",
    "title": "Introduction à Git",
    "section": "",
    "text": "Git est un système de contrôle de version distribué. Autrement dit, Git permet de sauvegarder différents états d’un projet. En outre, Git permet de suivre les modifications apportées aux fichiers et de coordonner le travail entre plusieurs personnes.\nGit en bref :\n\nSystème distribué : Chaque personne a une copie complète de l’historique du projet, permettant de travailler hors ligne et d’avoir une sauvegarde de toutes les versions du projet.\nSystème infini d’univers parallèles : Git permet de créer des branches, des univers parallèles de sauvegarde permettant d’expérimenter puis d’apporter les modifications finales (correction de bug, fonctionnalités) à l’univers principal.\nSystème rapide et efficace : s’installe et s’utilise rapidement",
    "crumbs": [
      "Introduction à Git"
    ]
  },
  {
    "objectID": "1_intro.html#quest-ce-que-git",
    "href": "1_intro.html#quest-ce-que-git",
    "title": "Introduction à Git",
    "section": "",
    "text": "Git est un système de contrôle de version distribué. Autrement dit, Git permet de sauvegarder différents états d’un projet. En outre, Git permet de suivre les modifications apportées aux fichiers et de coordonner le travail entre plusieurs personnes.\nGit en bref :\n\nSystème distribué : Chaque personne a une copie complète de l’historique du projet, permettant de travailler hors ligne et d’avoir une sauvegarde de toutes les versions du projet.\nSystème infini d’univers parallèles : Git permet de créer des branches, des univers parallèles de sauvegarde permettant d’expérimenter puis d’apporter les modifications finales (correction de bug, fonctionnalités) à l’univers principal.\nSystème rapide et efficace : s’installe et s’utilise rapidement",
    "crumbs": [
      "Introduction à Git"
    ]
  },
  {
    "objectID": "1_intro.html#pourquoi-utiliser-git",
    "href": "1_intro.html#pourquoi-utiliser-git",
    "title": "Introduction à Git",
    "section": "Pourquoi utiliser Git ?",
    "text": "Pourquoi utiliser Git ?\n\nHistorique détaillé des modifications Git enregistre chaque modification apportée aux fichiers d’un projet. Cela permet de revenir à une version précédente si nécessaire, de comprendre qui a apporté quelle modification et pourquoi.\nCollaboration facile Git facilite le travail en équipe. Les membres peuvent travailler sur des branches distinctes et fusionner leurs modifications finales. Cela réduit les risques de conflits et permet une gestion plus fluide des contributions.\nSauvegardes distribuées Chaque copie du dépôt Git contient l’intégralité de l’historique du projet. Cela signifie que si le serveur principal tombe en panne, tout membre ayant une copie à jour du dépôt peut restaurer le projet.\nOutils et intégration Git s’intègre avec de nombreux outils et services, comme GitHub.com, GitLab.com. Ces plateformes offrent des fonctionnalités supplémentaires comme la gestion des pull requests, l’intégration continue et la gestion des tickets.",
    "crumbs": [
      "Introduction à Git"
    ]
  },
  {
    "objectID": "1_intro.html#comment-utiliser-git",
    "href": "1_intro.html#comment-utiliser-git",
    "title": "Introduction à Git",
    "section": "Comment utiliser Git ?",
    "text": "Comment utiliser Git ?\n\n1. Installation de Git\nPour utiliser Git, il faut d’abord l’installer. Voici comment procéder pour les principaux systèmes d’exploitation :\n\nWindows : Télécharger et installer Git depuis git-scm.com.\nMac : Utiliser Homebrew avec la commande brew install git ou télécharger depuis git-scm.com.\nLinux : Utiliser le gestionnaire de paquets de votre distribution (par exemple, sudo apt install git pour Debian/Ubuntu).\n\n\n\n2. Configuration de Git\nAprès l’installation, configurez Git avec votre nom et votre adresse email :\ngit config --global user.name \"Votre Nom\"\ngit config --global user.email \"votre.email@example.com\"\n\n\n3. Initialisation d’un dépôt Git\nPour initialiser un nouveau dépôt Git dans un répertoire existant, utilisez la commande :\ngit init\n\n\n4. Clonage d’un dépôt existant\nPour cloner un dépôt existant depuis une URL, utilisez :\ngit clone https://url.du.depot.git\n\n\n5. Gestion des fichiers\n\nAjouter des fichiers : Pour ajouter des fichiers à l’index (staging area), utilisez :\ngit add nom_du_fichier\nou pour ajouter tous les fichiers modifiés :\ngit add .\nValider des modifications : Pour valider (commit) les modifications ajoutées à l’index avec un message de commit, utilisez :\ngit commit -m \"Message de commit\"\n\n\n\n6. Branches\n\nCréer une nouvelle branche :\ngit branch nom_de_branche\nChanger de branche :\ngit checkout nom_de_branche\nCréer et changer de branche en une seule commande :\ngit checkout -b nom_de_branche\nFusionner une branche :\ngit merge nom_de_branche\n\n\n\n7. Synchronisation avec un dépôt distant\n\nPousser des modifications vers un dépôt distant :\ngit push origin nom_de_branche\nRécupérer des modifications depuis un dépôt distant :\ngit pull origin nom_de_branche\n\n\n\n8. Révision et résolution de conflits\n\nVoir l’état du dépôt :\ngit status\nVoir l’historique des commits :\ngit log\nRésolution de conflits : En cas de conflit lors d’une fusion, Git vous indiquera les fichiers concernés. Vous devrez éditer ces fichiers pour résoudre les conflits, puis valider les modifications.\n\nEn suivant ces étapes, vous serez en mesure de commencer à utiliser Git pour gérer vos projets de manière efficace et collaborative.",
    "crumbs": [
      "Introduction à Git"
    ]
  }
]