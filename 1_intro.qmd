---
title: "Introduction à Git"
author: "cthiounn"
date: "2024-05-25"
format: html
---

## Qu'est-ce que Git ?

Git est un système de contrôle de version distribué. Autrement dit, Git permet de sauvegarder différents états d'un projet. En outre, Git permet de suivre les modifications apportées aux fichiers et de coordonner le travail entre plusieurs personnes. 

Git en bref :

* **Système distribué** : Chaque personne a une copie complète de l'historique du projet, permettant de travailler hors ligne et d'avoir une sauvegarde de toutes les versions du projet.
* **Système infini d'univers parallèles** : Git permet de créer des branches, des univers parallèles de sauvegarde permettant d'expérimenter puis d'apporter les modifications finales (correction de bug, fonctionnalités) à l'univers principal.
* **Système rapide et efficace** : s'installe et s'utilise rapidement

## Pourquoi utiliser Git ?

1. Historique détaillé des modifications
Git enregistre chaque modification apportée aux fichiers d'un projet. Cela permet de revenir à une version précédente si nécessaire, de comprendre qui a apporté quelle modification et pourquoi.

2. Collaboration facile
Git facilite le travail en équipe. Les membres peuvent travailler sur des branches distinctes et fusionner leurs modifications finales. Cela réduit les risques de conflits et permet une gestion plus fluide des contributions.

3. Sauvegardes distribuées
Chaque copie du dépôt Git contient l'intégralité de l'historique du projet. Cela signifie que si le serveur principal tombe en panne, tout membre ayant une copie à jour du dépôt peut restaurer le projet.

5. Outils et intégration
Git s'intègre avec de nombreux outils et services, comme GitHub.com, GitLab.com. Ces plateformes offrent des fonctionnalités supplémentaires comme la gestion des pull requests, l'intégration continue et la gestion des tickets.

## Comment utiliser Git ?


### 1. Installation de Git
Pour utiliser Git, il faut d'abord l'installer. Voici comment procéder pour les principaux systèmes d'exploitation :

- **Windows** : Télécharger et installer Git depuis [git-scm.com](https://git-scm.com/).
- **Mac** : Utiliser Homebrew avec la commande `brew install git` ou télécharger depuis [git-scm.com](https://git-scm.com/).
- **Linux** : Utiliser le gestionnaire de paquets de votre distribution (par exemple, `sudo apt install git` pour Debian/Ubuntu).

### 2. Configuration de Git
Après l'installation, configurez Git avec votre nom et votre adresse email :

```bash
git config --global user.name "Votre Nom"
git config --global user.email "votre.email@example.com"
```

### 3. Initialisation d'un dépôt Git
Pour initialiser un nouveau dépôt Git dans un répertoire existant, utilisez la commande :

```bash
git init
```

### 4. Clonage d'un dépôt existant
Pour cloner un dépôt existant depuis une URL, utilisez :

```bash
git clone https://url.du.depot.git
```

### 5. Gestion des fichiers
- **Ajouter des fichiers** : Pour ajouter des fichiers à l'index (staging area), utilisez :

  ```bash
  git add nom_du_fichier
  ```

  ou pour ajouter tous les fichiers modifiés :

  ```bash
  git add .
  ```

- **Valider des modifications** : Pour valider (commit) les modifications ajoutées à l'index avec un message de commit, utilisez :

  ```bash
  git commit -m "Message de commit"
  ```

### 6. Branches
- **Créer une nouvelle branche** :

  ```bash
  git branch nom_de_branche
  ```

- **Changer de branche** :

  ```bash
  git checkout nom_de_branche
  ```

- **Créer et changer de branche en une seule commande** :

  ```bash
  git checkout -b nom_de_branche
  ```

- **Fusionner une branche** :

  ```bash
  git merge nom_de_branche
  ```

### 7. Synchronisation avec un dépôt distant
- **Pousser des modifications vers un dépôt distant** :

  ```bash
  git push origin nom_de_branche
  ```

- **Récupérer des modifications depuis un dépôt distant** :

  ```bash
  git pull origin nom_de_branche
  ```

### 8. Révision et résolution de conflits
- **Voir l'état du dépôt** :

  ```bash
  git status
  ```

- **Voir l'historique des commits** :

  ```bash
  git log
  ```

- **Résolution de conflits** : En cas de conflit lors d'une fusion, Git vous indiquera les fichiers concernés. Vous devrez éditer ces fichiers pour résoudre les conflits, puis valider les modifications.

En suivant ces étapes, vous serez en mesure de commencer à utiliser Git pour gérer vos projets de manière efficace et collaborative.