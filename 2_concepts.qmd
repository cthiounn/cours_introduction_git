---
title: "Concepts de base de Git"
author: "cthiounn"
date: "2024-05-25"
format: html
---

## Notions centrales

Dans l'introduction, nous avons vu certaines notions clés et Git à un usage néophyte peut se résumer à ces fondamentaux : 

1. Savoir créer ou récupérer un projet git
2. Faire des modifications et sauvegarder en local
3. Pousser des sauvegardes vers le serveur distant
4. Récupérer des sauvegardes depuis le serveur distant

Il est bien important de distinguer ce qui est local et ce qui est distant, tout comme la localisation de vos fichiers (local, réseau, distant).

## Historique local Git

L'historique local dans Git représente l'ensemble des modifications et des versions successives d'un projet qui sont stockées localement sur votre ordinateur. 
Chaque fois que vous validez des modifications avec une nouvelle sauvegarde (commit), une nouvelle entrée est ajoutée à cet historique. Cet historique permet de suivre l'évolution du projet, de revenir à des versions antérieures et de comprendre les modifications apportées.

### Commandes principales :

- **Voir l'historique des commits** :
  ```bash
  git log
  ```
  Affiche une liste des commits avec leur identifiant, l'auteur, la date et le message de commit.

## Initialisation ou rapatriement d'un projet Git (clone ou init)

### Initialisation d'un nouveau dépôt Git

Pour créer un nouveau dépôt Git dans un répertoire existant, utilisez la commande suivante :

```bash
git init
```
Cette commande crée un sous-répertoire `.git` qui contient tous les fichiers nécessaires à la gestion du dépôt.

### Clonage d'un dépôt Git existant

Pour copier un dépôt Git existant depuis une URL distante, utilisez :

```bash
git clone https://url.du.depot.git
```
Cette commande crée un nouveau répertoire contenant une copie complète de l'historique du projet.

## Modification et ajout des fichiers pertinents (add)

Après avoir modifié ou ajouté des fichiers dans votre projet, vous devez les ajouter à l'index (staging area) avant de pouvoir les valider. 

### Ajouter un fichier spécifique :

```bash
git add nom_du_fichier
```

### Ajouter tous les fichiers modifiés :

```bash
git add .
```

L'ajout des fichiers les prépare pour être inclus dans le prochain commit.

## Création d'une sauvegarde (commit)

Pour sauvegarder les modifications ajoutées à l'index, vous devez créer un commit. Un commit enregistre l'état actuel de votre projet dans l'historique.

### Créer un commit avec un message :

```bash
git commit -m "Message de commit"
```

Le message de commit doit décrire brièvement les modifications apportées.

## Empilement de sauvegardes et navigation (log)

Git permet de naviguer dans l'historique des commits pour voir les différentes versions du projet.

### Voir l'historique des commits :

```bash
git log
```

Cette commande affiche une liste des commits avec leur identifiant, l'auteur, la date et le message de commit.

### Voir un historique plus compact :

```bash
git log --oneline
```

Affiche chaque commit sur une seule ligne.

## Historique centralisé

L'historique centralisé est stocké sur un serveur distant et permet à plusieurs développeurs de travailler ensemble sur le même projet. Les plateformes commerciales comme GitHub.com, Gitlab.com, ou libres comme framagit.org offrent des services pour héberger des dépôts Git centralisés.

## Pousser une/des sauvegarde/s vers l'historique centralisé - synchronisation sortante (push)

Pour envoyer vos commits locaux vers un dépôt distant, vous utilisez la commande `git push`.

### Pousser des modifications vers le dépôt distant :

```bash
git push origin nom_de_branche
```

Cette commande envoie les commits de votre branche locale vers la branche correspondante sur le dépôt distant.

## Récupérer une/les sauvegarde/s depuis l'historique centralisé - synchronisation entrante (pull/fetch)

### Récupérer les modifications depuis le dépôt distant (pull)

La commande `git pull` est utilisée pour récupérer les modifications depuis le dépôt distant et les fusionner avec votre branche locale.

```bash
git pull origin nom_de_branche
```

### Récupérer les modifications sans les fusionner (fetch)

La commande `git fetch` télécharge les modifications depuis le dépôt distant, mais ne les fusionne pas automatiquement. Vous pouvez ensuite les examiner et les fusionner manuellement.

```bash
git fetch origin
```

Pour fusionner les modifications après un fetch :

```bash
git merge origin/nom_de_branche
```

En utilisant ces commandes, vous pouvez gérer efficacement l'historique de votre projet, collaborer avec d'autres développeurs et synchroniser vos modifications avec un dépôt centralisé.